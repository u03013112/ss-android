import com.android.build.OutputFile
import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def getCurrentFlavor() {
    String task = getGradle().getStartParameter().getTaskRequests().toString()
    Matcher matcher = Pattern.compile("(assemble|generate)\\w*(Release|Debug)").matcher(task)
    if (matcher.find()) return matcher.group(2).toLowerCase() else {
        println "Warning: No match found for $task"
        return "debug"
    }
}
android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId 'com.github.kxu03013112free'
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.sdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs rootProject.resConfigs
    }
    buildTypes {
        debug {
            multiDexEnabled true
            pseudoLocalesEnabled true
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    kotlinOptions.jvmTarget = javaVersion
    packagingOptions.exclude '**/*.kotlin_*'
    splits {
        abi {
            enable true
            universalApk true
        }
    }
    sourceSets.main.jniLibs.srcDirs +=
            new File(project(':core').buildDir, "intermediates/bundles/${getCurrentFlavor()}/jni")
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation project(':core')
    implementation 'androidx.browser:browser:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.2.0-rc03'
    implementation 'com.google.android.gms:play-services-vision:19.0.0'
    implementation 'com.google.firebase:firebase-ads:18.3.0'
    implementation 'com.takisoft.preferencex:preferencex-simplemenu:1.0.0'
    implementation 'com.twofortyfouram:android-plugin-api-for-locale:1.0.4'
    implementation 'net.glxn.qrgen:android:2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "org.jetbrains.anko:anko:0.10.8"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test:runner:$androidTestVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidEspressoVersion"
    implementation 'com.google.android.gms:play-services-ads:18.3.0'
    implementation 'com.android.billingclient:billing:2.1.0'

    implementation  'com.umeng.umsdk:analytics:8.0.0'
    implementation  'com.umeng.umsdk:common:2.0.0'
}
repositories {
    mavenCentral()
}

apply plugin: 'com.google.gms.google-services'

ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, x86: 3, x86_64: 4]
if (getCurrentFlavor() == 'release') android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def offset = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        if (offset != null) output.versionCodeOverride = variant.versionCode + offset
    }
}
